<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com.wangkuo.zxb.lsp.provider;com.wangkuo.zxb.lsp.exchange">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>


    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:global.properties</value>
                <value>classpath:exchange.properties</value>
            </list>
        </property>
    </bean>

    <!-- 加载配置文件 -->
    <util:properties id="settings" location="classpath:settings.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl"
                  value="jdbc:mysql://${jdbc.dbIP}:${jdbc.dbPort}/${jdbc.dbName}?characterEncoding=utf-8"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="2"/>

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="30"/>

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="5"/>

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="2"/>

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30"/>

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="60"/>

        <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default:
            0 -->
        <property name="checkoutTimeout" value="10000"/>

    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>


    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.wangkuo.zxb.lsp.provider.db.dao"/>
        <property name="annotationClass" value="com.wangkuo.framework.persistence.annotation.MyBatisDao"/>
    </bean>


    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="read*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务拦截 -->
    <aop:config>
        <aop:pointcut id="servicesPointcut"
                      expression="execution(* com.wangkuo.zxb.lsp.provider.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicesPointcut"
                     order="1"/>
    </aop:config>

    <!-- 业务服务层日志拦截 -->
    <bean id="serviceLogAspect"
          class="com.wangkuo.framework.service.ServiceLogAspect"/>
    <aop:config expose-proxy="true">
        <aop:aspect id="serviceLogAspect_AOP" ref="serviceLogAspect"
                    order="1">
            <aop:pointcut id="serviceLogPointcut"
                          expression="execution(* com.wangkuo.zxb.lsp.provider.service.*.*(..))"/>
            <aop:before pointcut-ref="serviceLogPointcut" method="doBefore"/>
            <aop:after pointcut-ref="serviceLogPointcut" method="doAfter"/>
            <aop:around pointcut-ref="serviceLogPointcut" method="doAround"/>
            <aop:after-throwing pointcut-ref="serviceLogPointcut"
                                method="doThrowing" throwing="ex"/>
        </aop:aspect>
    </aop:config>
<!--

    <bean id="calculateDistance" class="com.wangkuo.zxb.lsp.provider.db.common.CalculateDistance">
        <property name="key" value="3dac16dd673f5dc42467f647dc8710ab"/>
    </bean>
-->

</beans>